{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_extraction import text\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from scipy import interp\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.preprocessing import label_binarize\n",
    "\n",
    "seed = 42\n",
    "np.random.seed(seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#open the locally saved csv\n",
    "df = pd.read_csv('C:/Users/595217/general-assembly/project-final/data/mgm.csv', usecols=['description', 'jobtype', 'usetype'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18000 entries, 0 to 17999\n",
      "Data columns (total 3 columns):\n",
      "description    18000 non-null object\n",
      "jobtype        18000 non-null object\n",
      "usetype        18000 non-null object\n",
      "dtypes: object(3)\n",
      "memory usage: 422.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the features and target variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df.usetype != 'Mixed Occupancy']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df['description']\n",
    "y = df['usetype']\n",
    "z = df['jobtype']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y.map({'Commercial': 0, 'Residential': 1})\n",
    "z = z.map({'New': 0, 'Existing': 1, 'Alteration': 2, 'Repair': 3, 'Other': 4, 'Addition': 5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1    10651\n",
       " 0     7329\n",
       " Name: usetype, dtype: int64, 0    4906\n",
       " 1    4137\n",
       " 2    3127\n",
       " 3    2386\n",
       " 4    2275\n",
       " 5    1149\n",
       " Name: jobtype, dtype: int64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(), z.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_bin = label_binarize(y, classes=[0,1,2])\n",
    "# n_y_bin_classes = y_bin.shape[1]\n",
    "z_bin = label_binarize(z, classes=[0,1,2,3,4,5])\n",
    "n_z_bin_classes = z_bin.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_tr, X_te, y_tr, y_te, = train_test_split(X, y, test_size=0.20, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92461"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create the BOW representation\n",
    "bow_transform = text.CountVectorizer(min_df=0, \n",
    "                                     stop_words=\"english\", \n",
    "                                     ngram_range=(1, 3))\n",
    "X_tr_bow = bow_transform.fit_transform(X_tr)\n",
    "X_te_bow = bow_transform.transform(X_te)\n",
    "\n",
    "matrix_len = len(bow_transform.vocabulary_)\n",
    "matrix_len"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3596, 92461)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create tf-idf representation using the bow matrix\n",
    "tfidf_trfm = text.TfidfTransformer(norm=None)\n",
    "X_tr_tfidf = tfidf_trfm.fit_transform(X_tr_bow)\n",
    "X_te_tfidf = tfidf_trfm.transform(X_te_bow)\n",
    "X_te_tfidf.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate a random forest classifier, run on the target variables and score the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate the classifier\n",
    "rf = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(X_tr_tfidf, y_tr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier 0.9927697441601779\n"
     ]
    }
   ],
   "source": [
    "y_pred = rf.predict(X_te_tfidf)\n",
    "print(rf.__class__.__name__, accuracy_score(y_te, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_scores(scores):\n",
    "    print(\"Scores:\", scores)\n",
    "    print(\"Mean:\", scores.mean())\n",
    "    print(\"StDev:\", scores.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_tr_tfidf_scores = cross_val_score(rf, X_tr_tfidf, y_tr, cv=10, scoring=\"accuracy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores: [0.99166088 0.99305073 0.99305073 0.9923558  0.99235049 0.99095967\n",
      " 0.99026426 0.99165508 0.99374131 0.99165508]\n",
      "Mean: 0.9920744006858417\n",
      "StDev: 0.0009941001304906293\n"
     ]
    }
   ],
   "source": [
    "display_scores(y_tr_tfidf_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_te_tfidf_scores = cross_val_score(rf, X_te_tfidf, y_te, cv=10, scoring=\"accuracy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores: [0.98611111 0.975      0.98611111 0.97222222 0.98611111 0.98055556\n",
      " 0.98055556 0.98050139 0.97493036 0.99162011]\n",
      "Mean: 0.9813718533273162\n",
      "StDev: 0.0058335919659696905\n"
     ]
    }
   ],
   "source": [
    "display_scores(y_te_tfidf_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1f85d45d198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the confusion matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confmat_y = confusion_matrix(y_te, y_pred)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "ax.matshow(confmat_y, cmap=plt.cm.Blues, alpha=0.3)\n",
    "for i in range(confmat_y.shape[0]):\n",
    "    for j in range(confmat_y.shape[1]):\n",
    "        ax.text(x=j, y=i, s=confmat_y[i, j], va='center', ha='center')\n",
    "\n",
    "plt.xlabel('Predicted label')\n",
    "plt.ylabel('True label')\n",
    "plt.xticks([0, 1], ['Commercial', 'Residential'])\n",
    "plt.yticks([0, 1], ['Commercial', 'Residential'], rotation='vertical', va='center')\n",
    "ax.grid(False)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a deep learning model with keras and compare to the random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Dropout\n",
    "from keras.constraints import maxnorm\n",
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import EarlyStopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(12, input_dim=matrix_len, kernel_initializer='uniform', activation='relu', kernel_constraint=maxnorm(3)))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(8, input_dim=matrix_len, kernel_initializer='uniform', activation='relu', kernel_constraint=maxnorm(3)))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, input_dim=matrix_len, kernel_initializer='uniform', activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(None, 1)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.output_shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_6 (Dense)              (None, 12)                1109544   \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 12)                0         \n",
      "_________________________________________________________________\n",
      "dense_7 (Dense)              (None, 8)                 104       \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 8)                 0         \n",
      "_________________________________________________________________\n",
      "dense_8 (Dense)              (None, 1)                 9         \n",
      "=================================================================\n",
      "Total params: 1,109,657\n",
      "Trainable params: 1,109,657\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "opt = Adam(lr=0.0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "early_stopping_monitor = EarlyStopping(patience=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 14384 samples, validate on 3596 samples\n",
      "Epoch 1/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.5764 - acc: 0.9208 - val_loss: 0.3307 - val_acc: 0.9825\n",
      "Epoch 2/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.2115 - acc: 0.9851 - val_loss: 0.1132 - val_acc: 0.9869\n",
      "Epoch 3/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0998 - acc: 0.9899 - val_loss: 0.0669 - val_acc: 0.9897\n",
      "Epoch 4/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0641 - acc: 0.9915 - val_loss: 0.0508 - val_acc: 0.9905\n",
      "Epoch 5/50\n",
      "14384/14384 [==============================] - 45s 3ms/step - loss: 0.0492 - acc: 0.9932 - val_loss: 0.0433 - val_acc: 0.9908\n",
      "Epoch 6/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0389 - acc: 0.9940 - val_loss: 0.0382 - val_acc: 0.9914\n",
      "Epoch 7/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0335 - acc: 0.9941 - val_loss: 0.0350 - val_acc: 0.9917\n",
      "Epoch 8/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0277 - acc: 0.9956 - val_loss: 0.0320 - val_acc: 0.9917\n",
      "Epoch 9/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0246 - acc: 0.9963 - val_loss: 0.0301 - val_acc: 0.9930\n",
      "Epoch 10/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0219 - acc: 0.9960 - val_loss: 0.0289 - val_acc: 0.9939\n",
      "Epoch 11/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0178 - acc: 0.9967 - val_loss: 0.0276 - val_acc: 0.9942\n",
      "Epoch 12/50\n",
      "14384/14384 [==============================] - 50s 3ms/step - loss: 0.0172 - acc: 0.9974 - val_loss: 0.0271 - val_acc: 0.9939\n",
      "Epoch 13/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0137 - acc: 0.9978 - val_loss: 0.0267 - val_acc: 0.9944\n",
      "Epoch 14/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0135 - acc: 0.9978 - val_loss: 0.0264 - val_acc: 0.9944\n",
      "Epoch 15/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0116 - acc: 0.9979 - val_loss: 0.0266 - val_acc: 0.9947\n",
      "Epoch 16/50\n",
      "14384/14384 [==============================] - 44s 3ms/step - loss: 0.0104 - acc: 0.9983 - val_loss: 0.0269 - val_acc: 0.9950\n",
      "Epoch 17/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0097 - acc: 0.9981 - val_loss: 0.0265 - val_acc: 0.9950\n",
      "Epoch 18/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0099 - acc: 0.9985 - val_loss: 0.0266 - val_acc: 0.9956\n",
      "Epoch 19/50\n",
      "14384/14384 [==============================] - 44s 3ms/step - loss: 0.0088 - acc: 0.9988 - val_loss: 0.0272 - val_acc: 0.9953\n",
      "Epoch 20/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0079 - acc: 0.9984 - val_loss: 0.0279 - val_acc: 0.9956\n",
      "Epoch 21/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0075 - acc: 0.9985 - val_loss: 0.0280 - val_acc: 0.9956\n",
      "Epoch 22/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0080 - acc: 0.9987 - val_loss: 0.0281 - val_acc: 0.9953\n",
      "Epoch 23/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0078 - acc: 0.9988 - val_loss: 0.0285 - val_acc: 0.9956\n",
      "Epoch 24/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0070 - acc: 0.9986 - val_loss: 0.0295 - val_acc: 0.9956\n",
      "Epoch 25/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0066 - acc: 0.9990 - val_loss: 0.0296 - val_acc: 0.9956\n",
      "Epoch 26/50\n",
      "14384/14384 [==============================] - 44s 3ms/step - loss: 0.0065 - acc: 0.9987 - val_loss: 0.0302 - val_acc: 0.9956\n",
      "Epoch 27/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0077 - acc: 0.9988 - val_loss: 0.0306 - val_acc: 0.9958\n",
      "Epoch 28/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0059 - acc: 0.9986 - val_loss: 0.0317 - val_acc: 0.9950\n",
      "Epoch 29/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0062 - acc: 0.9987 - val_loss: 0.0317 - val_acc: 0.9953\n",
      "Epoch 30/50\n",
      "14384/14384 [==============================] - 51s 4ms/step - loss: 0.0058 - acc: 0.9988 - val_loss: 0.0329 - val_acc: 0.9953\n",
      "Epoch 31/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0060 - acc: 0.9990 - val_loss: 0.0321 - val_acc: 0.9953\n",
      "Epoch 32/50\n",
      "14384/14384 [==============================] - 45s 3ms/step - loss: 0.0058 - acc: 0.9988 - val_loss: 0.0316 - val_acc: 0.9950\n",
      "Epoch 33/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0058 - acc: 0.9988 - val_loss: 0.0320 - val_acc: 0.9953\n",
      "Epoch 34/50\n",
      "14384/14384 [==============================] - 49s 3ms/step - loss: 0.0056 - acc: 0.9989 - val_loss: 0.0325 - val_acc: 0.9953\n",
      "Epoch 35/50\n",
      "14384/14384 [==============================] - 52s 4ms/step - loss: 0.0058 - acc: 0.9989 - val_loss: 0.0322 - val_acc: 0.9950\n",
      "Epoch 36/50\n",
      "14384/14384 [==============================] - 45s 3ms/step - loss: 0.0055 - acc: 0.9990 - val_loss: 0.0324 - val_acc: 0.9953\n",
      "Epoch 37/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0049 - acc: 0.9989 - val_loss: 0.0328 - val_acc: 0.9950\n",
      "Epoch 38/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0047 - acc: 0.9988 - val_loss: 0.0327 - val_acc: 0.9956\n",
      "Epoch 39/50\n",
      "14384/14384 [==============================] - 43s 3ms/step - loss: 0.0056 - acc: 0.9992 - val_loss: 0.0335 - val_acc: 0.9953\n",
      "Epoch 40/50\n",
      "14384/14384 [==============================] - 42s 3ms/step - loss: 0.0046 - acc: 0.9990 - val_loss: 0.0346 - val_acc: 0.9953\n",
      "Epoch 41/50\n",
      "14384/14384 [==============================] - 45s 3ms/step - loss: 0.0052 - acc: 0.9990 - val_loss: 0.0349 - val_acc: 0.9953\n",
      "Epoch 42/50\n",
      "14384/14384 [==============================] - 48s 3ms/step - loss: 0.0049 - acc: 0.9990 - val_loss: 0.0357 - val_acc: 0.9953\n",
      "Epoch 43/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0051 - acc: 0.9989 - val_loss: 0.0361 - val_acc: 0.9953\n",
      "Epoch 44/50\n",
      "14384/14384 [==============================] - 48s 3ms/step - loss: 0.0044 - acc: 0.9990 - val_loss: 0.0357 - val_acc: 0.9953\n",
      "Epoch 45/50\n",
      "14384/14384 [==============================] - 49s 3ms/step - loss: 0.0049 - acc: 0.9987 - val_loss: 0.0358 - val_acc: 0.9953\n",
      "Epoch 46/50\n",
      "14384/14384 [==============================] - 49s 3ms/step - loss: 0.0046 - acc: 0.9989 - val_loss: 0.0358 - val_acc: 0.9956\n",
      "Epoch 47/50\n",
      "14384/14384 [==============================] - 46s 3ms/step - loss: 0.0044 - acc: 0.9990 - val_loss: 0.0364 - val_acc: 0.9956\n",
      "Epoch 48/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0048 - acc: 0.9987 - val_loss: 0.0362 - val_acc: 0.9956\n",
      "Epoch 49/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0046 - acc: 0.9990 - val_loss: 0.0379 - val_acc: 0.9950\n",
      "Epoch 50/50\n",
      "14384/14384 [==============================] - 47s 3ms/step - loss: 0.0043 - acc: 0.9992 - val_loss: 0.0380 - val_acc: 0.9953\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1f85da6d7f0>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_tr_tfidf, y_tr, batch_size=32, epochs=50, verbose=1, validation_data=(X_te_tfidf, y_te))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3596/3596 [==============================] - 4s 1ms/step\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(X_te_tfidf, y_te, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_te_tfidf, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_classes = []\n",
    "for i in y_pred:\n",
    "    if i > .5:\n",
    "        y_pred_classes.append(1)\n",
    "    else:\n",
    "        y_pred_classes.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAawAAAGoCAYAAAAaWdG6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAHupJREFUeJzt3Xu8pnO9//HXZ045DDMOQ4zBMI6JiRFRzs0u2okSfqUtjB/lUKK02Um7frSpxOydRHSQUhGVtlMRGodxJpUopybGEJoZxozP74/7GtYsa61ZM3zXmu+9Xs/HYz3mvr73ta7PZy3X7b2uc2QmkiQt6Qb1dwOSJPWGgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoFVgYh4Y0T8MCIeiIjfR8RlEbF+f/e1MBGxekT8ZCHzrB0R9/RVT6pLRMyLiDsi4p6I+HlEjFzM5ZwdERt3Mb5/RExezGWOjIiPdZh2fS/MwFrCRUQAFwPXZOa6mbkx8O/Aqv3b2SsiYnBX45n5t8z8QF/3o7YyOzPHZ+YmwFPAxxdnIZl5UGb+/vVtjZHAy4Hl+l6egbXk2xF4MTPPnD+QmXcA10fEKc1fnndHxN4AEbFDRFwbERdGxJ8i4uSI+FBE3NzMt24z33kR8Y2I+E1EPBgR20fEtyPivog4b36tiJgYEVMi4raI+HFEDG/G/xoRn4uI64G9ImJcRFwVEXc2867b8a/J5vV1zXu3RcQ2ffcrVJuYAoyePxERx0TELRFxV0Sc2IwtGxG/bNbDezp8Lq6JiAnN6482n41rgW07LG9URPy0WeYtEbFtM/755rNxTfNZOaL5lpOBdZstwFNc38sb0t8NaKE2AW7tYnxPYDywGbAycEtE/LZ5bzNgI1p/kT4InJ2Zb42II4HDgU80860A7AS8F/g5rQ/vQc2yxgOPAscDu2TmzIj4DHAU8IXm+5/PzLcDRMRNwMmZeXFELEXrj6FVOvT7BPDOzHw+ItYDLgAmvIbfiwaQZit+Z+CcZnoisB7wViCASyNiO2AU8LfM3K2Zb0Sn5awGnAhsATwD/Aa4vXn768DXMvP6iFgTuJzW5whgQ1p/PC4H/DEivgEcC2ySmeObZa/doZTrewEGVr3eDlyQmfOAx5u/FrcEngVuycxpABHxAHBF8z130/rQzffzzMyIuBt4PDPvbr7nXmBtYA1gY+CG1p5JhtH6K3e+HzXzLweMzsyLATLz+Wa8Y79DgclNEM4DlvhjcFoiLB0Rd9BaH28FrmzGJzZf88NmOK0Auw44NSK+DPwiM6/rtLytaO1enw4QET/ilXVxF2DjDuvt8s26DfDLzHwBeCEinmDhu+Rd3wswsJZ89wJd7RePLsbme6HD65c6TL/Egv/NX+hino7zzQOuzMx9u6kzsxe9zPdJ4HFaW3+DgOd78T3S7Mwc32wp/YLWMazTaa1zJ2XmNzt/Q0RsAewKnBQRV2TmFzrN0t0NVAcBb8vM2Z2WBwt+Puax8P93ur4X4DGsJd+vgTdExKT5AxGxJfA0sHdEDI6IUcB2wM2vc+0bgW0jYlxTd5no4uzEzHwWeDQi3tfM94aIWKbTbCOAaZn5ErAf0OWJGlJXMvMZ4Ajg6IgYSmt33QEdjqmOjohVImJ1YFZmfh84Fdi806JuAnaIiJWa5ezV4b0rgMPmTzRbRz15jtYuwq64vhdgYC3hsnU7/T2Ad0brtPZ7gc8DPwDuAu6kFWqfzsy/v861pwP7AxdExF20AmzDbmbfDziime93wBs7vf8/wL9FxI20do/MRFoEmXk7rfV9n8y8gtZnYEqzS/sntMLjzcDNzW7E44AvdlrGNFqfnynAVcBtHd4+ApjQnMTxe+CQhfQzg9bu8nsi4pROb7u+FxA+XkSSVAO3sCRJVTCwJElVMLAkSVUwsCRJVTCw9CoRcXB/9yD1Ndf7JZ+Bpa74wdVA5Hq/hDOwJElVWGKvwxq5wkr5xtFj+ruNAekfT89g5Aor9XcbA9LwpbxbWn+ZPn06o0aN6u82BqRbb731ycxc6C9/if10vHH0GM666Kr+bkPqU9uOW7m/W5D63JDB8VBv5nOXoCSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCgaWJKkKBpYkqQoGliSpCkNKLDQi7gayq7eAzMxNS9SVJLWvIoEFvKfQciVJA1SRwMrMh0osV5I0cBU9hhURW0fELRHxz4iYExHzIuLZkjUlSe2p9EkXk4F9gfuBpYGDgDMK15QktaFSx7Belpl/jojBmTkPODcifle6piSp/ZQOrFkRMQy4IyL+C5gGLFu4piSpDZXeJbgfMBg4DJgJjAHeX7imJKkNFd3C6nC24GzgxJK1JEntrdSFwxdm5ge7u4DYC4clSYuq1BbWkc2/XkAsSXpdlLpweFrzchAwLTOfB4iIpYFVS9SUJLW30idd/Bh4qcP0vGZMkqRFUjqwhmTmnPkTzethhWtKktpQ6cCaHhHvnT8REbsDTxauKUlqQ6UvHD4EOD8iJjfTj9K6NkuSpEVSLLAiYhCwRWZuHRHDgcjM50rVkyS1t2K7BDPzJVp3uCAz/2lYSZJei9LHsK6MiKMjYkxErDj/q3BNSVIbKn0M64Dm3493GEtgncJ1JUltpvS9BMeWXL4kaeAo/cThZSLi+Ig4q5leLyK8XZMkaZGVPoZ1LjAH2KaZfhT4YuGa6uTkzx7B7m/biP3f845XvffDc/6b7TcYxT+emgHA7TfdwK5brMOBu+/AgbvvwHmTT+3VcqRanXba19j0zW9is0034UP/Z1+ef/75/m5J3SgdWOtm5n8BLwJk5mwgCtdUJ+/ecx9OOfuHrxp/YtpjTP3dNay6+hoLjG86YWvOueQazrnkGvY/7OiFLkeq1WOPPcbkM07nppuncudd9zBv3jx+9EPX8SVV6cCa09zwNgEiYl3ghcI11clmW27DciNWeNX45JOO55BjTiCid39DdLccqWZz585l9uzZzJ07l1mzZrHa6qv3d0vqRunAOgH4X2BMRJwPXA18unBN9cINV/8vK6+yGuM23ORV7917x1QOeO8OHHPQ3vzl/j/0Q3dS3xg9ejRHfepoxq69JmuMXo0RI0YwceLE/m5L3SgaWJl5JbAnsD9wATAhM6/pbv6IODgipkbE1H88PaNkawPa87Nn8b0zv8YBRx77qvfWf9Om/OjXt/HtS6/h/fsdxHEf/0g/dCj1jaeffppLL72EPz/wFx559G/MnDmT87///f5uS90ovYUFMBoYTOsu7dtFxJ7dzZiZZ2XmhMycMHKFlfqgtYHpsYf/yrRHH+bA3Xdg7502Z/rf/8akPXdmxvTHWXb4ciyz7HAAtt7+ncybO/flEzKkdnP1VVcxdu2xjBo1iqFDh7LHHnsyZcrv+rstdaPodVgR8W1gU+BeXnkuVgIXlayrnq27wcZcMuW+l6f33mlzvvmTKxm54krMmP44K668ChHBfXfdxksvvcSIFbw5idrTmDXX5KabbmTWrFksvfTS/PrXV7PFhAn93Za6UfpOF1tn5saFa2ghTjzqYO64+QaeefopPrDdpnz08E+z214f7nLeay//OZdccB6DBw/hDUstxQlfPevlkzIWZTlSDbbaaiv2fP8H2HLC5gwZMoTx49/CpEkH93db6kZkZrmFR5wDfCUzf7+o37vhJuPzrIuuKtCVtOTadtzK/d2C1OeGDI5bM3Ohm7alt7C+A0yJiL/TOp09gMzMTQvXlSS1mdKB9W1aD2y8m1eOYUmStMhKB9bDmXlp4RqSpAGgdGD9ISJ+APycDne4yEzPEpQkLZLSgbU0raDqeOm4p7VLkhZZ6edhfbTk8iVJA0fpC4fHAocDa3eslZnvLVlXktR+Su8S/BlwDq1jWJ4lKElabKUD6/nMPL1wDUnSAFA6sL4eEScAV7DgWYK3Fa4rSWozpQPrzbQuHN6JBW9+u1PhupKkNlM6sPYA1snMOYXrSJLaXOnnYd0JjCxcQ5I0AJTewlqV1t0ubmHBY1ie1i5JWiSlA+uEwsuXJA0Qpe90cW1ErAps2QzdnJlPlKwpSWpPRY9hRcQHgZuBvYAPAjdFxAdK1pQktafSuwSPA7acv1UVEaOAq4CfFK4rSWozpc8SHNRpF+CMPqgpSWpDpbew/jciLgcuaKb3Bi4rXFOS1IaKBFZEjANWzcxjImJP4O1AAFOA80vUlCS1t1K7504DnoPW04Uz86jM/CStravTCtWUJLWxUoG1dmbe1XkwM6fSejaWJEmLpFRgLdXDe0sXqilJamOlAuuWiJjUeTAiDgRuLVRTktTGSp0l+Ang4oj4EK8E1ARgGK07uEuStEiKBFZmPg5sExE7Aps0w7/MzF+XqCdJan+l7yX4G+A3JWtIkgYG7zohSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqgoElSaqCgSVJqoKBJUmqwpDu3oiI5Xv6xsx89vVvR5KkrnUbWMC9QALRYWz+dAJrFuxLkqQFdBtYmTmmLxuRJKknvTqGFRH7RMS/N6/XiIgtyrYlSdKCFhpYETEZ2BHYrxmaBZxZsilJkjrr6RjWfNtk5uYRcTtAZj4VEcMK9yVJ0gJ6s0vwxYgYROtECyJiJeClol1JktRJbwLrv4GfAqMi4kTgeuDLRbuSJKmThe4SzMzvRsStwC7N0F6ZeU/ZtiRJWlBvjmEBDAZepLVb0LtjSJL6XG/OEjwOuABYHVgD+EFEfLZ0Y5IkddSbLawPA1tk5iyAiPgScCtwUsnGJEnqqDe79x5iwWAbAjxYph1JkrrW081vv0brmNUs4N6IuLyZnkjrTEFJkvpMT7sE558JeC/wyw7jN5ZrR5KkrvV089tz+rIRSZJ6stCTLiJiXeBLwMbAUvPHM3P9gn1JkrSA3px0cR5wLq3nYL0buBD4YcGeJEl6ld4E1jKZeTlAZj6QmcfTunu7JEl9pjfXYb0QEQE8EBGHAI8Bq5RtS5KkBfUmsD4JDAeOoHUsawRwQMmmJEnqrDc3v72pefkcrzzEUZKkPtXThcMX0zwDqyuZuWeRjiRJ6kJPW1iT+6yLLgxfagjbjlu5P1uQ+tzl19/d3y1IS6yeLhy+ui8bkSSpJz7bSpJUBQNLklSFXgdWRLyhZCOSJPWkN08cfmtE3A3c30xvFhFnFO9MkqQOerOFdTrwHmAGQGbeibdmkiT1sd4E1qDMfKjT2LwSzUiS1J3e3JrpkYh4K5ARMRg4HPhT2bYkSVpQb7awDgWOAtYEHge2bsYkSeozvbmX4BPAPn3QiyRJ3erNE4e/RRf3FMzMg4t0JElSF3pzDOuqDq+XAvYAHinTjiRJXevNLsEfdZyOiO8BVxbrSJKkLizOrZnGAmu93o1IktST3hzDeppXjmENAp4Cji3ZlCRJnfUYWBERwGbAY83QS5nZ7UMdJUkqpcddgk04XZyZ85ovw0qS1C96cwzr5ojYvHgnkiT1oNtdghExJDPnAm8HJkXEA8BMIGhtfBlikqQ+09MxrJuBzYH39VEvkiR1q6fACoDMfKCPepEkqVs9BdaoiDiquzcz86sF+pEkqUs9BdZgYDjNlpYkSf2pp8Calplf6LNOJEnqQU+ntbtlJUlaYvQUWDv3WReSJC1Et4GVmU/1ZSOSJPVkce7WLklSnzOwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVTCwJElVMLAkSVUwsCRJVRhSYqERcTeQXb0FZGZuWqKuJKl9FQks4D2FlitJGqCKBFZmPlRiuZKkgavoMayI2DoibomIf0bEnIiYFxHPlqwpSWpPpU+6mAzsC9wPLA0cBJxRuKYkqQ2VOob1ssz8c0QMzsx5wLkR8bvSNSVJ7ad0YM2KiGHAHRHxX8A0YNnCNSVJbaj0LsH9gMHAYcBMYAzw/sI1JUltqOgWVoezBWcDJ5asJUlqb6UuHL4wMz/Y3QXEXjgsSVpUpbawjmz+9QJiSdLrosgxrMyc1rz8WGY+1PEL+FiJmpKk9lb6pIt3djH27sI1JUltqNQxrENpbUmtExF3dXhrOeCGEjUlSe2t1DGsHwC/Ak4Cju0w/lxmPlWopiSpjZW6+e0zwDPAvhExGFi1qTU8IoZn5sMl6kqS2lfR67Ai4jDg88DjwEvNcAKe1i5JWiSlb830CWCDzJxRuI4kqc2VPkvwEVq7BiVJek1Kb2E9CFwTEb8EXpg/mJlfLVxXktRmSgfWw83XsOZLS7DTT/8655z9LTKTAw+axJFHfqK/W5IW2/Qn/s5XvnQcTz/1JIMGDeJd//p+dv/Ah7nuN1fwg/O+wSMPPcjXzvwB6234JgBuv2UK5551GnNffJEhQ4dy4KFHsdnmWwFwzVWXceH3zyYiWHHlURx93EmMGLlCf/54A1Lpm9+eCBARy2bmzJK19Nrcc889nHP2t5hy480MGzaMXXd9F7vuuhvrrbdef7cmLZbBgwdz0Mc/xbj1N2bWrJkcOWkf3jLhbaw1dhzH/edXmfyV/1xg/uVHjOSEk85gpZVX4a8P3s/njjmU7/70KubNnctZZ3yZb3znZ4wYuQLf/sZX+cXFF/Chj3rTnr5W9BhWRLwtIn4P3NdMbxYR/1OyphbPH+67j6222pplllmGIUOGsN122/Ozn13c321Ji23FlUYxbv2NAVhmmWUZs9ZYZkx/gjXXXoc11hz7qvnXXX8jVlp5FQDWGjuOOXNe4MU5c0iSTHjh+dlkJrNmzWTFlVbp059FLaVPujgN+BdgBkBm3glsV7imFsObNtmE6677LTNmzGDWrFn86leX8egjj/R3W9Lr4vFpj/Hg/X9gg43f3Kv5b7j2StZZb0OGDhvGkCFD+fhRx/Gxj76f/fbcmYf/+gATd9ujcMfqSunAIjM7/19vXnfzRsTBETE1IqZOnz69cGfqaKONNuKYYz7Du/7lney667vYbNPNGDyk9CFOqbzZs2bxpc8dxaTDP80yyw5f6PwP/eXPnPvN0zj8U58DYO7cF7nskgs54+wL+d5FVzN23fX58fnnlG5bXSh+WntEbANkRAyLiKNpdg92JTPPyswJmTlh1KhRhVtTZwcceCC3TL2Na675LSusuKLHr1S9uXNf5P997ih23GU3tt1ul4XO/+QTf+eLx3+ST/37l1ht9BgAHrz/jwCsNnoMEcE7dpzIfffcUbRvda10YB0CfBwYDTwKjG+mtQR64oknAHj44Yf52cUXsc8++/ZzR9Liy0y+/uUTGLPWWPbY+yMLnf+fzz3L5489jP0PPoKN3/yWl8dXGrUKD//1QZ75R+s2qLdPvZExa61TrG91LzJf9UDgJcKECRPyppun9ncbA8r227+Dp2bMYOjQoZxy6lfZeeed+7ulAefy6+/u7xbaxr133canD9+ftddZjxjU+tv83yYdwYtz5nDm6SfxzD+eZvjw5Vhn3Ib856ln8sPvnsWF55/N6mus9fIyvnjqmYxcYSUuu+RCLvnJ+QwZMoRVVl2NT372iyw/YmR//WhtZ7ftN701MycsbL4igRURZ9C6Z2CXMvOIhS3DwNJAZGBpIOptYJXaJTgVuBVYCtgcuL/5Gk8PJ11IktSdUo8X+Q5AROwP7JiZLzbTZwJXlKgpSWpvpU+6WJ3WU4bnG96MSZK0SEpfaHMycHtE/KaZ3p7W87EkSVokpe8leG5E/ArYqhk6NjP/XrKmJKk9FdklGBEbNv9uTmsX4CPN1+rNmCRJi6TUFtZRwMHAV7p4L4GdCtWVJLWpUmcJHtz8u2OJ5UuSBp7SjxfZKyKWa14fHxEXRcRbFvZ9kiR1Vvq09v/IzOci4u20HjPyHeDMwjUlSW2odGDNv6vFbsA3MvMSYFjhmpKkNlQ6sB6LiG8CHwQui4g39EFNSVIbKh0eHwQuB96Vmf8AVgSOKVxTktSGigZWZs4CngDe3gzNpXUTXEmSFknpswRPAD4DfLYZGgp8v2RNSVJ7Kr1LcA/gvcBMgMz8GwveDFeSpF4pHVhzsvWEyASIiGUL15MktanSgXVhc5bgyIiYBFwFnF24piSpDZW+W/upEfFO4FlgA+BzmXllyZqSpPZU+nlYNAF1JUBEDI6ID2Xm+aXrSpLaS6nHiywfEZ+NiMkRMTFaDgMepHVtliRJi6TUFtb3gKeBKcBBtC4WHgbsnpl3FKopSWpjpQJrncx8M0BEnA08CayZmc8VqidJanOlzhJ8cf6LzJwH/MWwkiS9FqW2sDaLiGeb1wEs3UwHkJm5fKG6kqQ2VeqJw4NLLFeSNHD5qA9JUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUiM/u7hy5FxHTgof7uY4BaGXiyv5uQ+pjrff9ZKzNHLWymJTaw1H8iYmpmTujvPqS+5Hq/5HOXoCSpCgaWJKkKBpa6clZ/NyD1A9f7JZyBpVfJzAHzwY2IeRFxR0TcExE/johlXsOydoiIXzSv3xsRx/Yw78iI+Nhi1Ph8RBzd2/FO85wXER9YhFprR8Q9i9pjrQbSel8rA0sD3ezMHJ+ZmwBzgEM6vhkti/w5ycxLM/PkHmYZCSxyYEkDmYElveI6YFyzZXFfRPwPcBswJiImRsSUiLit2RIbDhAR74qIP0TE9cCe8xcUEftHxOTm9aoRcXFE3Nl8bQOcDKzbbN2d0sx3TETcEhF3RcSJHZZ1XET8MSKuAjZY2A8REZOa5dwZET/ttNW4S0RcFxF/ioj3NPMPjohTOtT+v6/1FymVYGBJQEQMAd4N3N0MbQB8NzPfAswEjgd2yczNganAURGxFPAt4F+BdwBv7GbxpwPXZuZmwObAvcCxwAPN1t0xETERWA94KzAe2CIitouILYB9gLfQCsQte/HjXJSZWzb17gMO7PDe2sD2wG7Amc3PcCDwTGZu2Sx/UkSM7UUdqU8N6e8GpH62dETc0by+DjgHWB14KDNvbMa3BjYGbogIgGHAFGBD4C+ZeT9ARHwfOLiLGjsBHwHIzHnAMxGxQqd5JjZftzfTw2kF2HLAxZk5q6lxaS9+pk0i4ou0djsOBy7v8N6FmfkScH9EPNj8DBOBTTsc3xrR1P5TL2pJfcbA0kA3OzPHdxxoQmlmxyHgyszct9N844HX68r7AE7KzG92qvGJxahxHvC+zLwzIvYHdujwXudlZVP78MzsGGxExNqLWFcqyl2C0sLdCGwbEeMAImKZiFgf+AMwNiLWbebbt5vvvxo4tPnewRGxPPAcra2n+S4HDuhwbGx0RKwC/BbYIyKWjojlaO1+XJjlgGkRMRT4UKf39oqIQU3P6wB/bGof2sxPRKwfEcv2oo7Up9zCkhYiM6c3WyoXRMQbmuHjM/NPEXEw8MuIeBK4Htiki0UcCZwVEQcC84BDM3NKRNzQnDb+q+Y41kbAlGYL75/AhzPztoj4EXAHrXtrXteLlv8DuKmZ/24WDMY/AtcCqwKHZObzEXE2rWNbt0Wr+HTgfb377Uh9x3sJSpKq4C5BSVIVDCxJUhUMLElSFQwsSVIVDCxJUhUMLElSFQwsSVIV/j9OSX6DvW9oIAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1f85ebb5860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the confusion matrix\n",
    "confmat_y = confusion_matrix(y_te, y_pred_classes)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "ax.matshow(confmat_y, cmap=plt.cm.Blues, alpha=0.3)\n",
    "for i in range(confmat_y.shape[0]):\n",
    "    for j in range(confmat_y.shape[1]):\n",
    "        ax.text(x=j, y=i, s=confmat_y[i, j], va='center', ha='center')\n",
    "\n",
    "plt.xlabel('Predicted label')\n",
    "plt.ylabel('True label')\n",
    "plt.xticks([0, 1], ['Commercial', 'Residential'])\n",
    "plt.yticks([0, 1], ['Commercial', 'Residential'], rotation='vertical', va='center')\n",
    "ax.grid(False)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "y_pred_keras = model.predict(X_te_tfidf).ravel()\n",
    "fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_te, y_pred_keras)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_keras = model.predict(X_te_tfidf, batch_size=32).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_te, y_pred_keras)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import auc\n",
    "auc_keras = auc(fpr_keras, tpr_keras)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rf = rf.predict_proba(X_te_tfidf)[:, 1]\n",
    "fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_te, y_pred_rf)\n",
    "auc_rf = auc(fpr_rf, tpr_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1f85e9a8630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1f85eb75dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))\n",
    "plt.plot(fpr_rf, tpr_rf, label='RF (area = {:.3f})'.format(auc_rf))\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve')\n",
    "plt.legend(loc='best')\n",
    "plt.show()\n",
    "# Zoom in view of the upper left corner.\n",
    "plt.figure(2)\n",
    "plt.xlim(0, 0.2)\n",
    "plt.ylim(0.98, 1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))\n",
    "plt.plot(fpr_rf, tpr_rf, label='RF (area = {:.3f})'.format(auc_rf))\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve (zoomed in at top left)')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert predictions to text labels and join with the main dataframe to see where the errors occurred "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_v_pred = pd.concat([y_te.reset_index(), pd.Series(y_pred_classes)], axis=1, join='inner', ignore_index=True).reset_index(drop=True).set_index([1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "real_v_pred.reset_index(inplace=True)\n",
    "real_v_pred.columns = ['test', 'index', 'pred']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "errors = real_v_pred[real_v_pred.test != real_v_pred.pred]\n",
    "errors.set_index(keys='index', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_errors = df.join(errors, how='inner')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Descriptions of where 'Residential' was misclassified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- GRADING PERMIT TO CLEAR NEW SUBDIVISION FOR RYAN RIDGE  RESIDENTIAL LOTS. PROPERTY IS IN A PRIORITY CONSTRUCTION SITE. NPDES PERMIT NO. ALR108382. TO MEET ALL APPLICABLE CODES.\n",
      "- DEMOLISH commercial STRUCTURE TO CLEAR LOT. BOND #321705, WATER WORKS 5416 AND HEALTH DEPT LETTER ON FILE.  THIS PERMIT IS GOOD FOR 30 DAYS.  FINAL INSPECTION WILL BE REQUIRED BY HOUSING CODES. TO MEET ALL APPLICABLE CODERS.\n",
      "- GRADING PERMIT TO ERECT  TWO STORY  SINGLE FAMILY RESIDENCE WITH 5462 SF TOTAL. PROPERTY NOT IN A PRIORITY CONSTRUCTION SITE. MUST COMPLY WITH CITY’S GUIDELINES.  TO MEET ALL APPLICABLE CODES.\n",
      "- Law Offices of Jennifer Thompkins  (334)356-2888  OFFICE SPACE to be Used for OFFICE SPACE\n",
      "- CERTIFICATE OF OCCUPANCY FOR A BUSINESS LIC TO BE USED FOR MECHANIC SHOP.  POINT OF CONTACT CRYSTAL FOWLER 334-261-3372.\n",
      "- DEMOLISH EXISTING WOOD FRAME DWELLING TO CLEAR LOT. HEALTH DEPT APPROVAL ON FILE. WATER WORKS NO. 5062. BOND NO. 32178. DEMOLITION MUST BE COMPLETED WITHIN 30 DAYS. FINAL INSPECTION WILL BE REQUIRED BY HOUSING CODES 625-2069 AND WATER WORKS. TO MEET ALL APPLICABLE CODES.\n",
      "- GRADING PERMIT FOR THE NEW SUBDIVISION STONEYBROOKE 6B. PROPERTY IS IN A PRIORITY CONSTRUCTION SITE. NPDES PERMIT NO. ALR108799. TO MEET ALL APPLICABLE CODES.\n",
      "- GRADING PERMIT FOR THE NEW SUBDIVISION STONEYBROOKE 6B. PROPERTY IS IN A PRIORITY CONSTRUCTION SITE. NPDES PERMIT NO. ALR108799. TO MEET ALL APPLICABLE CODES.\n",
      "- LOCATE A 80' X 32' MOBILE HOME FOR LIVING PURPOSES. BORAD OF ADJ APPROVAL ON FILE. TIE DOWN INSPECTION WILL BE REQUIRED. HOLD HARMLESS AGREEMENT ON FILE. FLOODPLAN DEVELOPMENT PERMIT ON FILE. FLOOD ELEV CERTIFICATE OF 167 FOR (CONSTRUCTION DRAWINGS) ON FILE. FLOOD ELEVATION CERT OF 167 FOR(FINISHED CONSTRUCTION) ON FILE. TO MEET ALL APPLICABLE CODES.\n"
     ]
    }
   ],
   "source": [
    "for row in df_errors['description'][df_errors.usetype == 'Residential']:\n",
    "    print(\"-\", row)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Descriptions of where 'Commercial' was misclassified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- GENERAL REPAIR TO FIRE DAMAGE TO AN EXISTING COMMERCIAL BUILDING.  ELECTRICAL INSPECTION REQUIRED.  TO MEET ALL APPLICABLE CODES.\n",
      "- GENERAL REPAIR TO FIRE DAMAGE TO AN EXISTING COMMERCIAL BUILDING.  ELECTRICAL INSPECTION REQUIRED.  TO MEET ALL APPLICABLE CODES.\n",
      "- GENERAL REPAIRS TO EXISTING SINGLE FAMILY DWELLING DUE TO ROTTEN WOOD. ALL APPLICABLE DEPARTMENT INSPECTIONS AS REQUIRED. TO MEET ALL APPLICABLE CODES.\n",
      "- INSTALL A 18' X 36' SWIMMING POOL IN REAR OF EXISTING DWELLING. 44\" FENCE IS REQUIRED THE POOL AREA WITH A LOCKABLE GATE. DIRT WILL BE DUMPED AT THE AREA SAND AND GRAVEL ON REDLAND ROAD IN WETUMPKA. NOT TO ENCROACH ON 10 REAR EASEMENT. TO MEET ALL APPLICABLE CODES.\n",
      "- INSTALL A COMMERCIAL SWIMMING POOL FOR HOTEL. 44\" FENCE IS REQUIRED AROUND THE POOL AREA WITH A LOCKABLE GATE. DIRT WILL BE DUMPED AT BUILDERS SUPPLY CONCRETE, 3075 HILL STREET OR 10442 US HWY 80. HEALTH DEPT APPROVAL ON FILE.\n",
      "- RENOVATIONS TO INTERIOR OF EXISTING APARTMENT 163. DUE TO FIRE DAMAGE. WILL NEED ELECTRICAL AND PLUMBING. ALL APPLICABLE DEPARTMENT INSPECTIONS AS REQUIRED. MUST COMPLY WITH STATE ENERGY CODE. TO MEET ALL APPLICABLE CODES.\n",
      "- RENOVATIONS TO INTERIOR OF EXISTING APARTMENT 163. DUE TO FIRE DAMAGE. WILL NEED ELECTRICAL AND PLUMBING. ALL APPLICABLE DEPARTMENT INSPECTIONS AS REQUIRED. MUST COMPLY WITH STATE ENERGY CODE. TO MEET ALL APPLICABLE CODES.\n",
      "- DEMOLISH RESIDENTIAL STRUCTURE TO CLEAR LOT.  WORK TO BE COMPLETED BY CITY OF MONTGOMERY LANDFILL DEPT. ****NO FEE PERMIT****\n"
     ]
    }
   ],
   "source": [
    "for row in df_errors['description'][df_errors.usetype == 'Commercial']:\n",
    "    print(\"-\", row)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
